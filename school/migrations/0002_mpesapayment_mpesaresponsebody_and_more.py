# Generated by Django 5.2.7 on 2025-10-24 13:56

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('school', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MpesaPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('merchant_request_id', models.CharField(max_length=255)),
                ('checkout_request_id', models.CharField(max_length=255)),
                ('result_code', models.IntegerField()),
                ('result_desc', models.CharField(max_length=255)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('mpesa_receipt_number', models.CharField(max_length=255, unique=True)),
                ('wallet_balance', models.CharField(blank=True, max_length=255, null=True)),
                ('transaction_date', models.BigIntegerField()),
                ('phone_number', models.BigIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='MpesaResponseBody',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('body', models.JSONField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MpesaStkPushRequestResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('merchant_request_id', models.CharField(max_length=100)),
                ('checkout_request_id', models.CharField(max_length=100)),
                ('response_code', models.CharField(max_length=10)),
                ('response_description', models.CharField(max_length=255)),
                ('customer_message', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('invoice_number', models.CharField(blank=True, max_length=100)),
                ('is_paid', models.BooleanField(default=False)),
                ('reason_not_paid', models.TextField(blank=True)),
                ('amount', models.FloatField(blank=True, null=True)),
                ('order_number', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(choices=[('basic_school', 'Basic School Plan'), ('standard_school', 'Standard School Plan'), ('premium_school', 'Premium School Plan'), ('custom_school', 'Custom Enterprise Plan')], help_text='Name of the subscription plan (e.g., Basic School, Premium School)', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text="Detailed description of the plan's benefits.")),
                ('base_price', models.DecimalField(decimal_places=2, help_text='Base price of the plan per billing cycle.', max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('price_per_student', models.DecimalField(decimal_places=2, default=0.0, help_text='Additional cost per student per month/year.', max_digits=10)),
                ('price_per_bus', models.DecimalField(decimal_places=2, default=0.0, help_text='Additional cost per bus per month/year.', max_digits=10)),
                ('price_per_parent', models.DecimalField(decimal_places=2, default=0.0, help_text='Additional cost per parent per month/year.', max_digits=10)),
                ('features_json', models.JSONField(blank=True, default=dict, help_text="JSON object listing features and limits included in this plan. E.g., {'max_students': 500, 'max_buses': 5, 'sms_notifications': True}")),
                ('is_active', models.BooleanField(default=True, help_text='Indicates if the plan is currently available for subscription.')),
                ('default_billing_cycle', models.CharField(choices=[('monthly', 'Monthly'), ('annually', 'Annually'), ('quarterly', 'Quarterly')], default='annually', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Subscription Plan',
                'verbose_name_plural': 'Subscription Plans',
                'ordering': ['base_price'],
            },
        ),
        migrations.CreateModel(
            name='ContactMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_name', models.CharField(help_text='First name of the person contacting.', max_length=100)),
                ('last_name', models.CharField(help_text='Last name of the person contacting.', max_length=100)),
                ('email_address', models.EmailField(help_text='Email address for communication.', max_length=254)),
                ('school_name', models.CharField(blank=True, help_text='Name of the school the person represents or is inquiring about.', max_length=255, null=True)),
                ('message', models.TextField(help_text='The content of the inquiry or message.')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Timestamp when the message was received.')),
                ('is_read', models.BooleanField(default=False, help_text='Indicates if the message has been reviewed by an admin.')),
            ],
            options={
                'verbose_name': 'Contact Message',
                'verbose_name_plural': 'Contact Messages',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['email_address'], name='school_cont_email_a_3e0c13_idx'), models.Index(fields=['school_name'], name='school_cont_school__40a673_idx'), models.Index(fields=['created_at'], name='school_cont_created_344905_idx')],
            },
        ),
        migrations.CreateModel(
            name='SchoolSubscription',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('price_charged', models.DecimalField(decimal_places=2, help_text='The actual price charged for this subscription.', max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('billing_cycle', models.CharField(choices=[('monthly', 'Monthly'), ('annually', 'Annually'), ('quarterly', 'Quarterly')], default='annually', max_length=10)),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Date and time when the subscription started.')),
                ('end_date', models.DateTimeField(blank=True, help_text='Date and time when the subscription is set to end or expired.', null=True)),
                ('next_billing_date', models.DateTimeField(blank=True, help_text='The next date on which the school will be billed.', null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('cancelled', 'Cancelled'), ('pending', 'Payment Pending'), ('expired', 'Expired'), ('trial', 'Trial'), ('paused', 'Paused')], default='trial', help_text="Current status of the school's subscription.", max_length=20)),
                ('payment_method_last4', models.CharField(blank=True, help_text='Last 4 digits of the payment method (e.g., card number).', max_length=4, null=True)),
                ('current_students_count', models.PositiveIntegerField(default=0, help_text='Current number of active students in the school.')),
                ('current_buses_count', models.PositiveIntegerField(default=0, help_text='Current number of active buses in the school.')),
                ('current_parents_count', models.PositiveIntegerField(default=0, help_text='Current number of active parents in the school.')),
                ('parents_to_pay', models.BooleanField(default=False, help_text='Indicates if parents are required to pay for the subscription.')),
                ('school_to_pay', models.BooleanField(default=True, help_text='Indicates if the school itself is responsible for paying the subscription.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('managed_by', models.ForeignKey(blank=True, help_text="The global platform user who manages this school's subscription.", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_school_subscriptions', to=settings.AUTH_USER_MODEL)),
                ('school', models.OneToOneField(help_text='The school (tenant) holding this subscription.', on_delete=django.db.models.deletion.CASCADE, related_name='platform_subscription', to='school.school')),
                ('plan', models.ForeignKey(blank=True, help_text='The subscription plan this school is subscribed to.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='school_subscriptions', to='school.subscriptionplan')),
            ],
            options={
                'verbose_name': 'School Subscription',
                'verbose_name_plural': 'School Subscriptions',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('invoice_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount_due', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('amount_paid', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('currency', models.CharField(default='KES', help_text='Currency of the invoice (e.g., KES, USD).', max_length=3)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('failed', 'Failed'), ('refunded', 'Refunded'), ('void', 'Void')], default='pending', max_length=20)),
                ('invoice_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Date when the invoice was generated.')),
                ('due_date', models.DateTimeField(blank=True, help_text='Date when the invoice payment is due.', null=True)),
                ('paid_at', models.DateTimeField(blank=True, help_text='Date and time when the invoice was successfully paid.', null=True)),
                ('invoice_pdf_url', models.URLField(blank=True, help_text='URL to the hosted invoice PDF.', max_length=500, null=True)),
                ('line_items', models.JSONField(blank=True, default=list, help_text="JSON array of line items in the invoice. E.g., [{'description': 'Standard Plan', 'quantity': 1, 'unit_price': 5000, 'total': 5000}, {'description': 'Per student fee', 'quantity': 200, 'unit_price': 5, 'total': 1000}]")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, help_text='The parent responsible for this invoice, if applicable.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invoices_paid', to='school.parent')),
                ('school', models.ForeignKey(help_text='The school to whom this invoice belongs.', on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to='school.school')),
                ('subscription', models.ForeignKey(blank=True, help_text='The subscription this invoice is associated with.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invoices', to='school.schoolsubscription')),
            ],
            options={
                'verbose_name': 'Invoice',
                'verbose_name_plural': 'Invoices',
                'ordering': ['-invoice_date'],
                'indexes': [models.Index(fields=['school', 'status'], name='school_invo_school__aea085_idx'), models.Index(fields=['invoice_date'], name='school_invo_invoice_9467de_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='schoolsubscription',
            index=models.Index(fields=['school', 'status'], name='school_scho_school__802d98_idx'),
        ),
        migrations.AddIndex(
            model_name='schoolsubscription',
            index=models.Index(fields=['end_date'], name='school_scho_end_dat_6ea367_idx'),
        ),
    ]
